/*
 * Created: 2014-12-09
 * 
 * ====================================================================
 *    The author of this file licenses it to you under the Apache
 *    License, Version 2.0. You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing,
 *    software distributed under the License is distributed on an
 *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *    KIND, either express or implied.  See the License for the
 *    specific language governing permissions and limitations
 *    under the License.
 * ====================================================================
 */
package at.co.malli.relpm.gui;

import at.co.malli.lib.status.StatusNotifier;
import at.co.malli.relpm.data.SettingsProvider;
import javax.swing.UIManager;


/**
 * @author Dietmar Malli
 */
public class SettingsDialog extends javax.swing.JDialog
{
  private boolean pressedOK;
  /**
   * Creates new form SettingsDialog
   */
  public SettingsDialog (java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();
    setLocationRelativeTo(null);
  }
  
  @Override
  public void setVisible (boolean b)
  {
    if(b==true) //Only when opening, not when closing...
    {
      pressedOK = false;
      String preset = SettingsProvider.getInstance().getString("gui.lookAndFeel");
      if(preset.equals("SYSTEM"))
        preset = UIManager.getSystemLookAndFeelClassName();
      UIManager.LookAndFeelInfo[] installed = UIManager.getInstalledLookAndFeels();
      int i = 0;
      boolean found = false;
      for(UIManager.LookAndFeelInfo item : installed)
      {
        jComDesign.addItem(item.getName());
        if(item.getClassName().equals(preset))
          found = true;
        if(!found)
          i++;
      }
      if(i==installed.length) //Settings got corrupted... i was not found...
      {
        jComDesign.removeAllItems();
        preset = UIManager.getSystemLookAndFeelClassName(); //Default...
        i = 0;
        found = false;
        for(UIManager.LookAndFeelInfo item : installed) //ToDo: Find a more beautiful solution... to reuse code above?
        {
          jComDesign.addItem(item.getName());
          if(item.getClassName().equals(preset))
            found = true;
          if(!found)
            i++;
        }
      }
      
      jComDesign.setSelectedIndex(i);
      
      jSpinStatusNotificationTime.setValue(SettingsProvider.getInstance().getInt("gui.statusBar.notificationTime"));
      
      jCheckParseM3U.setSelected(SettingsProvider.getInstance().getBoolean("data.import.parseM3Utags"));
      
      jCheckLast100.setSelected(SettingsProvider.getInstance().getBoolean("data.export.last100"));
    }
    super.setVisible(b);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    jTabbedPane = new javax.swing.JTabbedPane();
    jPanTabGUI = new javax.swing.JPanel();
    jPanTabGUIMain = new javax.swing.JPanel();
    jLabDesign = new javax.swing.JLabel();
    jComDesign = new javax.swing.JComboBox();
    jSpinStatusNotificationTime = new javax.swing.JSpinner();
    jLabStatusNotificationTime = new javax.swing.JLabel();
    jLabStatusNotificationTime2 = new javax.swing.JLabel();
    jLabGUIwarning = new javax.swing.JLabel();
    jPanTabImport = new javax.swing.JPanel();
    jCheckParseM3U = new javax.swing.JCheckBox();
    jPanTabExport = new javax.swing.JPanel();
    jCheckLast100 = new javax.swing.JCheckBox();
    jPanSouth = new javax.swing.JPanel();
    jButOk = new javax.swing.JButton();
    jButAbourt = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Settings");

    jPanTabGUI.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    jPanTabGUI.setLayout(new java.awt.BorderLayout());

    jPanTabGUIMain.setLayout(new java.awt.GridBagLayout());

    jLabDesign.setText("Design:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    jPanTabGUIMain.add(jLabDesign, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    jPanTabGUIMain.add(jComDesign, gridBagConstraints);

    jSpinStatusNotificationTime.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10000, 1));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    jPanTabGUIMain.add(jSpinStatusNotificationTime, gridBagConstraints);

    jLabStatusNotificationTime.setText("Staus Bar display duration:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    jPanTabGUIMain.add(jLabStatusNotificationTime, gridBagConstraints);

    jLabStatusNotificationTime2.setText("ms");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    jPanTabGUIMain.add(jLabStatusNotificationTime2, gridBagConstraints);

    jPanTabGUI.add(jPanTabGUIMain, java.awt.BorderLayout.CENTER);

    jLabGUIwarning.setText("<html>Warning. You may need to restart the application<br>to apply changes to the Design Setting.</html>");
    jPanTabGUI.add(jLabGUIwarning, java.awt.BorderLayout.SOUTH);

    jTabbedPane.addTab("GUI", jPanTabGUI);

    jPanTabImport.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    jPanTabImport.setLayout(new java.awt.BorderLayout());

    jCheckParseM3U.setText("Parse EXTINF line from M3U instead of parsing the tags of every file.");
    jPanTabImport.add(jCheckParseM3U, java.awt.BorderLayout.CENTER);

    jTabbedPane.addTab("Data Import", jPanTabImport);

    jPanTabExport.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    jPanTabExport.setLayout(new java.awt.BorderLayout());

    jCheckLast100.setText("Write another playlist file with the last 100 tracks.");
    jPanTabExport.add(jCheckLast100, java.awt.BorderLayout.CENTER);

    jTabbedPane.addTab("Data Export", jPanTabExport);

    getContentPane().add(jTabbedPane, java.awt.BorderLayout.CENTER);

    jButOk.setText("OK");
    jButOk.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButOkActionPerformed(evt);
      }
    });
    jPanSouth.add(jButOk);

    jButAbourt.setText("Abort");
    jButAbourt.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButAbourtActionPerformed(evt);
      }
    });
    jPanSouth.add(jButAbourt);

    getContentPane().add(jPanSouth, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jButOkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButOkActionPerformed
  {//GEN-HEADEREND:event_jButOkActionPerformed
    String wanted = (String) jComDesign.getSelectedItem();
    UIManager.LookAndFeelInfo[] installed = UIManager.getInstalledLookAndFeels();
    for(UIManager.LookAndFeelInfo item : installed)
    {
      if(item.getName().equals(wanted))
        SettingsProvider.getInstance().set("gui.lookAndFeel", item.getClassName());
    }
    SettingsProvider.getInstance().set("gui.statusBar.notificationTime", jSpinStatusNotificationTime.getValue());
    SettingsProvider.getInstance().set("data.import.parseM3Utags",jCheckParseM3U.isSelected());
    SettingsProvider.getInstance().set("data.export.last100",jCheckLast100.isSelected());
    pressedOK = true;
    dispose();
  }//GEN-LAST:event_jButOkActionPerformed

  private void jButAbourtActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButAbourtActionPerformed
  {//GEN-HEADEREND:event_jButAbourtActionPerformed
    dispose();
  }//GEN-LAST:event_jButAbourtActionPerformed

  @Override
  public void dispose ()
  {
    if(pressedOK)
      StatusNotifier.getInstance().fireStatusEvent(this, "The changes were saved in memory and will be written to persistent storage when you close the application.");
    else
      StatusNotifier.getInstance().fireStatusEvent(this, "No settings were changed.");
    super.dispose();
  }

  
  
  /**
   * @param args the command line arguments
   */
  public static void main (String args[])
  {
    /*
     * Set the Nimbus look and feel
     */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
     * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For details see
     * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
        //</editor-fold>

    /*
     * Create and display the dialog
     */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run ()
      {
        SettingsDialog dialog = new SettingsDialog(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing (java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButAbourt;
  private javax.swing.JButton jButOk;
  private javax.swing.JCheckBox jCheckLast100;
  private javax.swing.JCheckBox jCheckParseM3U;
  private javax.swing.JComboBox jComDesign;
  private javax.swing.JLabel jLabDesign;
  private javax.swing.JLabel jLabGUIwarning;
  private javax.swing.JLabel jLabStatusNotificationTime;
  private javax.swing.JLabel jLabStatusNotificationTime2;
  private javax.swing.JPanel jPanSouth;
  private javax.swing.JPanel jPanTabExport;
  private javax.swing.JPanel jPanTabGUI;
  private javax.swing.JPanel jPanTabGUIMain;
  private javax.swing.JPanel jPanTabImport;
  private javax.swing.JSpinner jSpinStatusNotificationTime;
  private javax.swing.JTabbedPane jTabbedPane;
  // End of variables declaration//GEN-END:variables

}
